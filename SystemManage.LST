C51 COMPILER V9.60.0.0   SYSTEMMANAGE                                                      05/22/2022 14:05:18 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SYSTEMMANAGE
OBJECT MODULE PLACED IN SystemManage.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SystemManage.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //*****************************************************************************
   2          // file     : SystemManage.c
   3          //
   4          // Copyright (c) 2011-2020  HUAWEI co. Ltd. All rights reserved
   5          //
   6          // Change Logs:
   7          // Date             Author      Note
   8          // 2017/11/15       Linzhen     First draft version
   9          //
  10          //*****************************************************************************
  11          
  12          //*****************************************************************************
  13          //
  14          //! \addtogroup linux-t
  15          //! @{
  16          //
  17          //*****************************************************************************
  18          
  19          /*---------------------------------------------------------------------------*/
  20          /* include files                                                             */
  21          /*---------------------------------------------------------------------------*/
  22          //#include "public_def.h"
  23          #include "SystemManageDef.h"
  24          //#include "SystemState_Idle.h"
  25          //#include "SystemState_WakeUp.h"
  26          //#include "SystemState_Ready.h"
  27          //#include "SystemState_Normal.h"
  28          //#include "SystemState_StandBy.h"
  29          //#include "SystemState_GoToSleep.h"
  30          //#include "SystemState_Sleep.h"
  31          //#include "SystemState_DeepSleep.h"
  32          //#include "SystemState_Open.h"
  33          //#include "SystemManage.h"
  34          //#include "sleep.h"
  35          //
  36          //#include "timer.h"
  37          //#include "utils.h"
  38          //#include "../McuLogManage/McuLogManage.h"
  39          
  40          #include "SystemState_Idle.h"
  41          #include "SystemState_Ready.h"
  42          #include "SystemState_Normal.h"
  43          #include "system.h"
  44          
  45          
  46          #define Event_poweroff_to_idle          0
  47          #define Event_idle_to_wakeup            1
  48          #define Event_wakeup_to_ready           2
  49          #define Event_ready_to_open             3
  50          #define Event_open_to_normal            4
  51          #define Event_normal_to_standby         5
  52          #define Event_standby_to_gotosleep      6
  53          #define Event_gotosleep_to_sleep        7
  54          #define Event_gotosleep_to_deepsleep      8
  55          #define Event_sleep_to_open           9
C51 COMPILER V9.60.0.0   SYSTEMMANAGE                                                      05/22/2022 14:05:18 PAGE 2   

  56          #define Event_deepsleep_to_wakeup       10
  57          /** add timestamp */
  58          static volatile int g_timer_stamp = 0;
  59          
  60          /*
  61          #define SystemState_Idle                0x00//上电重启
  62          #define SystemState_Ready               0x01//系统准备打开，进行相关模块及变量的初始化
  63          #define SystemState_WakeUp              0x02//系统从睡眠状态被唤醒
  64          #define SystemState_Open                0x03//系统执行开机动作
  65          #define SystemState_Normal              0x04//系统正常工作
  66          #define SystemState_PowerOff            0x05//系统关掉
  67          #define SystemState_StandBy             0x06//acc off+powerkey
  68          #define SystemState_GoToSleep           0x07//系统准备进入睡眠状态
  69          #define SystemState_Sleep               0x08
  70          #define SystemState_DeepSleep           0x09
  71          #define SystemState_Max                 0x0a//最大值
  72          */
  73          
  74          char const * g_sys_state_str[] = 
  75          {
  76            "SystemState_Idle"
  77            ,"SystemState_Ready"
  78            ,"SystemState_WakeUp"
  79            ,"SystemState_Open"
  80            ,"SystemState_Normal"
  81            ,"SystemState_PowerOff"
  82            ,"SystemState_StandBy"
  83            ,"SystemState_GoToSleep"
  84            ,"SystemState_Sleep"
  85            ,"SystemState_DeepSleep"
  86          };
  87          
  88          /*---------------------------------------------------------------------------*/
  89          /* define APIs                                                               */
  90          /*---------------------------------------------------------------------------*/
  91          /**
  92            * \brief
  93            * TimeSlice_Count
  94            * \param NONE
  95            *
  96            * \return NONE
  97            */
  98          void TimeSlice_Count(void)//Time Slice Counter
  99          {
 100   1          if (Counter.TimeCounter1ms < 2) //in 500us
 101   1          {
 102   2              Counter.TimeCounter1ms++;
 103   2          }
 104   1      
 105   1          g_timer_stamp++;
 106   1          if (g_timer_stamp == 0x7FFFFFFF)
 107   1          {
 108   2              g_timer_stamp = 0;
 109   2          }
 110   1      }
 111          
 112          /**
 113            * \brief
 114            * SystemState_Get_Stamp
 115            * \param NONE
 116            *
 117            * \return NONE
C51 COMPILER V9.60.0.0   SYSTEMMANAGE                                                      05/22/2022 14:05:18 PAGE 3   

 118            */
 119          int SystemState_Get_Stamp(void)
 120          {
 121   1          return g_timer_stamp;
 122   1      }
 123          
 124          /**
 125            * \brief
 126            * SystemState_Set_Stamp
 127            * \param stamp
 128            *
 129            * \return NONE
 130            */
 131          void SystemState_Set_Stamp(int stamp)
 132          {
 133   1          g_timer_stamp = stamp;
 134   1      }
 135          
 136          /**
 137            * \brief
 138            * SystemState_TimeSlice_Reset
 139            * \param TimeSlice_Item
 140            *
 141            * \return NONE
 142            */
 143          void SystemState_TimeSlice_Reset(unsigned int TimeSlice_Item)
 144          {
 145   1          switch (TimeSlice_Item)
 146   1          {
 147   2          case System_TimeSlice_1ms:
 148   2              Counter.TimeCounter1ms = 0;
 149   2              break;
 150   2      ////
 151   2          case System_TimeSlice_2ms:
 152   2              Counter.TimeCounter1ms = 0;
 153   2              break;
 154   2          case System_TimeSlice_3ms:
 155   2              Counter.TimeCounter1ms = 0;
 156   2              break;
 157   2          case System_TimeSlice_4ms:
 158   2              Counter.TimeCounter1ms = 0;
 159   2              break;
 160   2          case System_TimeSlice_5ms:
 161   2              Counter.TimeCounter1ms = 0;
 162   2              break;
 163   2          case System_TimeSlice_6ms:
 164   2              Counter.TimeCounter1ms = 0;
 165   2              break;
 166   2          case System_TimeSlice_7ms:
 167   2              Counter.TimeCounter1ms = 0;
 168   2              break;
 169   2          case System_TimeSlice_8ms:
 170   2              Counter.TimeCounter1ms = 0;
 171   2              break;
 172   2          case System_TimeSlice_9ms:
 173   2              Counter.TimeCounter1ms = 0;
 174   2              break;
 175   2      ////
 176   2          case System_TimeSlice_10ms:
 177   2              Counter.TimeCounter10ms = 0;
 178   2              break;
 179   2          case System_TimeSlice_20ms:
C51 COMPILER V9.60.0.0   SYSTEMMANAGE                                                      05/22/2022 14:05:18 PAGE 4   

 180   2              Counter.TimeCounter20ms = 0;
 181   2              break;
 182   2          case System_TimeSlice_50ms:
 183   2              Counter.TimeCounter50ms = 0;
 184   2              break;
 185   2          case System_TimeSlice_100ms:
 186   2              Counter.TimeCounter100ms = 0;
 187   2              break;
 188   2          case System_TimeSlice_200ms:
 189   2              Counter.TimeCounter200ms = 0;
 190   2              break;
 191   2          case System_TimeSlice_500ms:
 192   2              Counter.TimeCounter500ms = 0;
 193   2              break;
 194   2      
 195   2          case System_TimeSlice_1s:
 196   2              Counter.TimeCounter1s = 0;
 197   2              break;
 198   2      
 199   2          case System_TimeSlice_2s:
 200   2              Counter.TimeCounter2s = 0;
 201   2              break;
 202   2          case System_TimeSlice_5s:
 203   2              Counter.TimeCounter5s = 0;
 204   2              break;
 205   2          default: //reset all
 206   2              Counter.TimeCounter1ms = 0; //testadd
 207   2      
 208   2              Counter.TimeCounter2ms = 0;
 209   2              Counter.TimeCounter3ms = 0;
 210   2              Counter.TimeCounter4ms = 0;
 211   2              Counter.TimeCounter5ms = 0;
 212   2              Counter.TimeCounter6ms = 0;
 213   2              Counter.TimeCounter7ms = 0;
 214   2              Counter.TimeCounter8ms = 0;
 215   2              Counter.TimeCounter9ms = 0;
 216   2      
 217   2              Counter.TimeCounter10ms = 0;
 218   2              Counter.TimeCounter20ms = 0;
 219   2              Counter.TimeCounter50ms = 0;
 220   2              Counter.TimeCounter100ms = 0;
 221   2              Counter.TimeCounter200ms = 0;
 222   2              Counter.TimeCounter500ms = 0;
 223   2              Counter.TimeCounter1s = 0;
 224   2              Counter.TimeCounter2s = 0;
 225   2              Counter.TimeCounter5s = 0;
 226   2              break;
 227   2          }
 228   1      }
 229          
 230          /**
 231            * \brief
 232            * SystemState_TimeSlice_Obtain
 233            * \param TimeSlice_Item
 234            *
 235            * \return unsigned char
 236            */
 237          unsigned char SystemState_TimeSlice_Obtain(unsigned int TimeSlice_Item)
 238          {
 239   1          unsigned char TimeSlice_Obtain_result = 0;
 240   1          switch (TimeSlice_Item)
 241   1          {
C51 COMPILER V9.60.0.0   SYSTEMMANAGE                                                      05/22/2022 14:05:18 PAGE 5   

 242   2          case System_TimeSlice_1ms:
 243   2              if (Counter.TimeCounter1ms == 2)
 244   2              {
 245   3      
 246   3              //DISABLE_INT();
 247   3              //Counter.TimeCounter1ms = 0;
 248   3              //ENABLE_INT();
 249   3      
 250   3                  SystemState_TimeSlice_Reset(System_TimeSlice_1ms);
 251   3      
 252   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 253   3      ////
 254   3                  if (Counter.TimeCounter2ms < System_TimeSlice_2ms) //2ms
 255   3                  {
 256   4                      Counter.TimeCounter2ms++;
 257   4                  }
 258   3                  if (Counter.TimeCounter3ms < System_TimeSlice_3ms) //3ms
 259   3                  {
 260   4                      Counter.TimeCounter3ms++;
 261   4                  }
 262   3                  if (Counter.TimeCounter4ms < System_TimeSlice_4ms) //4ms
 263   3                  {
 264   4                      Counter.TimeCounter4ms++;
 265   4                  }
 266   3                  if (Counter.TimeCounter5ms < System_TimeSlice_5ms) //5ms
 267   3                  {
 268   4                      Counter.TimeCounter5ms++;
 269   4                  }
 270   3                  if (Counter.TimeCounter6ms < System_TimeSlice_6ms) //6ms
 271   3                  {
 272   4                      Counter.TimeCounter6ms++;
 273   4                  }
 274   3                  if (Counter.TimeCounter7ms < System_TimeSlice_7ms) //7ms
 275   3                  {
 276   4                      Counter.TimeCounter7ms++;
 277   4                  }
 278   3                  if (Counter.TimeCounter8ms < System_TimeSlice_8ms) //8ms
 279   3                  {
 280   4                      Counter.TimeCounter8ms++;
 281   4                  }
 282   3                  if (Counter.TimeCounter9ms < System_TimeSlice_9ms) //9ms
 283   3                  {
 284   4                      Counter.TimeCounter9ms++;
 285   4                  }
 286   3      
 287   3      ////
 288   3                  if (Counter.TimeCounter10ms < System_TimeSlice_10ms) //10ms
 289   3                  {
 290   4                      Counter.TimeCounter10ms++;
 291   4                  }
 292   3                  if (Counter.TimeCounter20ms < System_TimeSlice_20ms) //20ms
 293   3                  {
 294   4                      Counter.TimeCounter20ms++;
 295   4                  }
 296   3                  if (Counter.TimeCounter50ms < System_TimeSlice_50ms) //50ms
 297   3                  {
 298   4                      Counter.TimeCounter50ms++;
 299   4                  }
 300   3                  if (Counter.TimeCounter100ms < System_TimeSlice_100ms) //100ms
 301   3                  {
 302   4                      Counter.TimeCounter100ms++;
 303   4                  }
C51 COMPILER V9.60.0.0   SYSTEMMANAGE                                                      05/22/2022 14:05:18 PAGE 6   

 304   3                  if (Counter.TimeCounter200ms < System_TimeSlice_200ms) //200ms
 305   3                  {
 306   4                      Counter.TimeCounter200ms++;
 307   4                  }
 308   3                  if (Counter.TimeCounter500ms < System_TimeSlice_500ms) //500ms
 309   3                  {
 310   4                      Counter.TimeCounter500ms++;
 311   4                  }
 312   3      
 313   3                  if (Counter.TimeCounter1s < System_TimeSlice_1s) //1s
 314   3                  {
 315   4                      Counter.TimeCounter1s++;
 316   4                  }
 317   3      
 318   3                  if (Counter.TimeCounter2s < System_TimeSlice_2s) //2s
 319   3                  {
 320   4                      Counter.TimeCounter2s++;
 321   4                  }
 322   3                  if (Counter.TimeCounter5s < System_TimeSlice_5s) //5s
 323   3                  {
 324   4                      Counter.TimeCounter5s++;
 325   4                  }
 326   3              }
 327   2              break;
 328   2      ////
 329   2          case System_TimeSlice_2ms:
 330   2              if (Counter.TimeCounter2ms == System_TimeSlice_2ms)
 331   2              {
 332   3                  SystemState_TimeSlice_Reset(System_TimeSlice_2ms);
 333   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 334   3              }
 335   2              break;
 336   2      ////
 337   2          case System_TimeSlice_3ms:
 338   2              if (Counter.TimeCounter3ms == System_TimeSlice_3ms)
 339   2              {
 340   3                  SystemState_TimeSlice_Reset(System_TimeSlice_3ms);
 341   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 342   3              }
 343   2              break;
 344   2      ////
 345   2          case System_TimeSlice_4ms:
 346   2              if (Counter.TimeCounter4ms == System_TimeSlice_4ms)
 347   2              {
 348   3                  SystemState_TimeSlice_Reset(System_TimeSlice_3ms);
 349   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 350   3              }
 351   2              break;
 352   2      ////
 353   2          case System_TimeSlice_5ms:
 354   2              if (Counter.TimeCounter5ms == System_TimeSlice_5ms)
 355   2              {
 356   3                  SystemState_TimeSlice_Reset(System_TimeSlice_5ms);
 357   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 358   3              }
 359   2              break;
 360   2      ////
 361   2          case System_TimeSlice_6ms:
 362   2              if (Counter.TimeCounter6ms == System_TimeSlice_6ms)
 363   2              {
 364   3                  SystemState_TimeSlice_Reset(System_TimeSlice_6ms);
 365   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
C51 COMPILER V9.60.0.0   SYSTEMMANAGE                                                      05/22/2022 14:05:18 PAGE 7   

 366   3              }
 367   2              break;
 368   2      ////
 369   2          case System_TimeSlice_7ms:
 370   2              if (Counter.TimeCounter7ms == System_TimeSlice_7ms)
 371   2              {
 372   3                  SystemState_TimeSlice_Reset(System_TimeSlice_7ms);
 373   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 374   3              }
 375   2              break;
 376   2      ////
 377   2          case System_TimeSlice_8ms:
 378   2              if (Counter.TimeCounter8ms == System_TimeSlice_8ms)
 379   2              {
 380   3                  SystemState_TimeSlice_Reset(System_TimeSlice_8ms);
 381   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 382   3              }
 383   2              break;
 384   2      ////
 385   2          case System_TimeSlice_9ms:
 386   2              if (Counter.TimeCounter9ms == System_TimeSlice_9ms)
 387   2              {
 388   3                  SystemState_TimeSlice_Reset(System_TimeSlice_9ms);
 389   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 390   3              }
 391   2              break;
 392   2      ////
 393   2      
 394   2      
 395   2      
 396   2      
 397   2          case System_TimeSlice_10ms:
 398   2              if (Counter.TimeCounter10ms == System_TimeSlice_10ms)
 399   2              {
 400   3                  SystemState_TimeSlice_Reset(System_TimeSlice_10ms);
 401   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 402   3              }
 403   2              break;
 404   2          case System_TimeSlice_20ms:
 405   2              if (Counter.TimeCounter20ms == System_TimeSlice_20ms)
 406   2              {
 407   3                  SystemState_TimeSlice_Reset(System_TimeSlice_20ms);
 408   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 409   3              }
 410   2              break;
 411   2          case System_TimeSlice_50ms:
 412   2              if (Counter.TimeCounter50ms == System_TimeSlice_50ms)
 413   2              {
 414   3                  SystemState_TimeSlice_Reset(System_TimeSlice_50ms);
 415   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 416   3              }
 417   2              break;
 418   2          case System_TimeSlice_100ms:
 419   2              if (Counter.TimeCounter100ms == System_TimeSlice_100ms)
 420   2              {
 421   3                  SystemState_TimeSlice_Reset(System_TimeSlice_100ms);
 422   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 423   3              }
 424   2              break;
 425   2          case System_TimeSlice_200ms:
 426   2              if (Counter.TimeCounter200ms == System_TimeSlice_200ms)
 427   2              {
C51 COMPILER V9.60.0.0   SYSTEMMANAGE                                                      05/22/2022 14:05:18 PAGE 8   

 428   3                  SystemState_TimeSlice_Reset(System_TimeSlice_200ms);
 429   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 430   3              }
 431   2              break;
 432   2          case System_TimeSlice_500ms:
 433   2              if (Counter.TimeCounter500ms == System_TimeSlice_500ms)
 434   2              {
 435   3                  SystemState_TimeSlice_Reset(System_TimeSlice_500ms);
 436   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 437   3              }
 438   2              break;
 439   2      
 440   2      
 441   2          case System_TimeSlice_1s:
 442   2              if (Counter.TimeCounter1s == System_TimeSlice_1s)
 443   2              {
 444   3                  SystemState_TimeSlice_Reset(System_TimeSlice_1s);
 445   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 446   3              }
 447   2              break;
 448   2      
 449   2      
 450   2          case System_TimeSlice_2s:
 451   2              if (Counter.TimeCounter2s == System_TimeSlice_2s)
 452   2              {
 453   3                  SystemState_TimeSlice_Reset(System_TimeSlice_2s);
 454   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 455   3              }
 456   2              break;
 457   2          case System_TimeSlice_5s:
 458   2              if (Counter.TimeCounter5s == System_TimeSlice_5s)
 459   2              {
 460   3                  SystemState_TimeSlice_Reset(System_TimeSlice_5s);
 461   3                  TimeSlice_Obtain_result = System_TimeSlice_ObtainSuccess;
 462   3              }
 463   2              break;
 464   2          default:
 465   2              break;
 466   2          }
 467   1          return (TimeSlice_Obtain_result);
 468   1      }
 469          
 470          /**
 471            * \brief
 472            * SystemState_CurrentState_Set
 473            * \param systemState
 474            *
 475            * \return NONE
 476            */
 477          void SystemState_CurrentState_Set(unsigned char systemState)
 478          {
 479   1          SystemState.CurrentState = systemState;
 480   1      }
 481          
 482          /**
 483            * \brief
 484            * SystemState_NextState_Set
 485            * \param systemState
 486            *
 487            * \return NONE
 488            */
 489          void SystemState_NextState_Set(unsigned char systemState)
C51 COMPILER V9.60.0.0   SYSTEMMANAGE                                                      05/22/2022 14:05:18 PAGE 9   

 490          {
 491   1          SystemState.NextState = systemState;
 492   1      }
 493          
 494          /**
 495            * \brief
 496            * SystemState_Manage
 497            * \param None
 498            *
 499            * \return unsigned char
 500            */
 501          unsigned char SystemState_Manage(void)
 502          {
 503   1        switch(SystemState.CurrentState)
 504   1        {
 505   2          case SystemState_Idle:
 506   2          {
 507   3            System_Idle_Task();
 508   3            SystemState_TimeSlice_Reset(System_TimeSlice_Max);
 509   3            SystemState_CurrentState_Set(SystemState_Ready);
 510   3          }
 511   2          break;
 512   2      
 513   2          case SystemState_Ready:
 514   2          {
 515   3            SystemState_Ready_Task();
 516   3            SystemState_TimeSlice_Reset(System_TimeSlice_Max);
 517   3            SystemState_CurrentState_Set(SystemState_Normal);
 518   3          }
 519   2      
 520   2          break;
 521   2      
 522   2          case SystemState_Normal:
 523   2          {
 524   3            System_Normal_Task();
 525   3          }
 526   2          break;
 527   2      
 528   2          default:
 529   2          break;
 530   2        }
 531   1        return(SystemState.CurrentState);
 532   1      }
 533          
 534          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1047    ----
   CONSTANT SIZE    =    193    ----
   XDATA SIZE       =     32       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
