C51 COMPILER V9.60.0.0   CRC                                                               05/22/2022 00:44:31 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CRC
OBJECT MODULE PLACED IN crc.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE crc.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "type.h"
   2          
   3          #if 0
              const static unsigned short crc_fcr[] =
              {
                  0x0000,0x8005,0x800f,0x000a,0x801b,0x001e,0x0014,0x8011,
                  0x8033,0x0036,0x003c,0x8039,0x0028,0x802d,0x8027,0x0022,
                  0x8063,0x0066,0x006c,0x8069,0x0078,0x807d,0x8077,0x0072,
                  0x0050,0x8055,0x805f,0x005a,0x804b,0x004e,0x0044,0x8041,
                  0x80c3,0x00c6,0x00cc,0x80c9,0x00d8,0x80dd,0x80d7,0x00d2,
                  0x00f0,0x80f5,0x80ff,0x00fa,0x80eb,0x00ee,0x00e4,0x80e1,
                  0x00a0,0x80a5,0x80af,0x00aa,0x80bb,0x00be,0x00b4,0x80b1,
                  0x8093,0x0096,0x009c,0x8099,0x0088,0x808d,0x8087,0x0082,
                  0x8183,0x0186,0x018c,0x8189,0x0198,0x819d,0x8197,0x0192,
                  0x01b0,0x81b5,0x81bf,0x01ba,0x81ab,0x01ae,0x01a4,0x81a1,
                  0x01e0,0x81e5,0x81ef,0x01ea,0x81fb,0x01fe,0x01f4,0x81f1,
                  0x81d3,0x01d6,0x01dc,0x81d9,0x01c8,0x81cd,0x81c7,0x01c2,
                  0x0140,0x8145,0x814f,0x014a,0x815b,0x015e,0x0154,0x8151,
                  0x8173,0x0176,0x017c,0x8179,0x0168,0x816d,0x8167,0x0162,
                  0x8123,0x0126,0x012c,0x8129,0x0138,0x813d,0x8137,0x0132,
                  0x0110,0x8115,0x811f,0x011a,0x810b,0x010e,0x0104,0x8101,
                  0x8303,0x0306,0x030c,0x8309,0x0318,0x831d,0x8317,0x0312,
                  0x0330,0x8335,0x833f,0x033a,0x832b,0x032e,0x0324,0x8321,
                  0x0360,0x8365,0x836f,0x036a,0x837b,0x037e,0x0374,0x8371,
                  0x8353,0x0356,0x035c,0x8359,0x0348,0x834d,0x8347,0x0342,
                  0x03c0,0x83c5,0x83cf,0x03ca,0x83db,0x03de,0x03d4,0x83d1,
                  0x83f3,0x03f6,0x03fc,0x83f9,0x03e8,0x83ed,0x83e7,0x03e2,
                  0x83a3,0x03a6,0x03ac,0x83a9,0x03b8,0x83bd,0x83b7,0x03b2,
                  0x0390,0x8395,0x839f,0x039a,0x838b,0x038e,0x0384,0x8381,
                  0x0280,0x8285,0x828f,0x028a,0x829b,0x029e,0x0294,0x8291,
                  0x82b3,0x02b6,0x02bc,0x82b9,0x02a8,0x82ad,0x82a7,0x02a2,
                  0x82e3,0x02e6,0x02ec,0x82e9,0x02f8,0x82fd,0x82f7,0x02f2,
                  0x02d0,0x82d5,0x82df,0x02da,0x82cb,0x02ce,0x02c4,0x82c1,
                  0x8243,0x0246,0x024c,0x8249,0x0258,0x825d,0x8257,0x0252,
                  0x0270,0x8275,0x827f,0x027a,0x826b,0x026e,0x0264,0x8261,
                  0x0220,0x8225,0x822f,0x022a,0x823b,0x023e,0x0234,0x8231,
                  0x8213,0x0216,0x021c,0x8219,0x0208,0x820d,0x8207,0x0202
              };
              
              unsigned short crc16(unsigned short nCrc, unsigned char *buf, int len)
              {
                  /*register */int counter;
                  /*register */unsigned short crc = nCrc;
                  for (counter = 0; counter < len; counter++)
                      crc = (crc <<8 ) ^ crc_fcr[((crc>>8) ^ *(char *)buf++)&0x00FF];
                  return crc;
              }
              #endif
  49          #if 0
              // CRC16码表
              static static unsigned short crc_fcr[256] = {
                  0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
                  0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
                  0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
                  0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
C51 COMPILER V9.60.0.0   CRC                                                               05/22/2022 00:44:31 PAGE 2   

                  0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
                  0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
                  0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
                  0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
                  0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
                  0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
                  0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
                  0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
                  0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
                  0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
                  0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
                  0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
                  0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
                  0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
                  0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
                  0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
                  0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
                  0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
                  0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
                  0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
                  0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
                  0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
                  0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
                  0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
                  0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
                  0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
                  0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
                  0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040};
              #endif
  85          // CRC MODBUS 效验
  86          
  87          unsigned short modbus_crc16_calc(unsigned char dat, unsigned short crc)
  88          {
  89   1          unsigned char  i = 0;
  90   1          unsigned short check = 0;
  91   1          crc = crc ^ dat;
  92   1      
  93   1          for (i=0; i<8; i++)
  94   1          {
  95   2              check = crc & 1;
  96   2              crc = crc >> 1;
  97   2              crc = crc & 0x7FFF;
  98   2      
  99   2              if (1 == check)
 100   2              {
 101   3                  crc = crc ^ 0xA001;
 102   3              }
 103   2              crc = crc & 0xFFFF;
 104   2          }
 105   1      
 106   1          return crc;
 107   1      }
 108          
 109          unsigned short modbus_crc16(const unsigned char *buf, unsigned int len)
 110          {
 111   1          /*register */int counter;
 112   1          /*register */unsigned short crc = 0xFFFF;
 113   1      
 114   1          for (counter=0; counter<len; counter++)
 115   1          {
 116   2              crc = modbus_crc16_calc(buf[counter], crc);
 117   2          }
C51 COMPILER V9.60.0.0   CRC                                                               05/22/2022 00:44:31 PAGE 3   

 118   1      
 119   1          return crc;
 120   1      }
 121          
 122          unsigned char modbus_crc16_check(unsigned char *buf, unsigned short buf_len)
 123          {
 124   1          u8  i;
 125   1          U8  crch;
 126   1          U8  crcl;
 127   1          U16 crc;
 128   1          
 129   1      //    DEBUG_ERROR("MODBUS:");
 130   1          for (i=0; i<buf_len; i++)
 131   1          {
 132   2      //        DEBUG_ERROR("[%d]", buf[i]);    
 133   2          }
 134   1      //    DEBUG_ERROR("\r\n");
 135   1          
 136   1          if (buf_len <= 4)
 137   1          {
 138   2      //        DEBUG_ERROR("MODBUS: len[%d] <= 4\r\n", buf_len);
 139   2              return ERROR;
 140   2          }
 141   1      
 142   1          // 计算CRC校验
 143   1          crc = modbus_crc16(buf, buf_len - 2);
 144   1          crch = (U8)(crc >> 8);
 145   1          crcl = (U8)(crc);
 146   1      
 147   1          if ((crcl != buf[buf_len - 2]) || (crch != buf[buf_len - 1]))
 148   1          {
 149   2      //        DEBUG_ERROR("MODBUS:crc[%x] is invalid crc1[%x] crc2[%x]\r\n", crc, buf[buf_len-2], buf[buf_len-
             -1]);
 150   2              return ERROR;
 151   2          }
 152   1      
 153   1          return OK;
 154   1      }
 155          
 156          
 157          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    329    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
